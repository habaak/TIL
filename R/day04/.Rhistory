tf <- data.frame(
id=(1:5)
test=c(86:90)
)
tf <- data.frame(
id=(1:5),
test=c(86:90)
)
tf
tf <- data.frame(
id=(6:10),
test=c(91:95)
)
tf <- data.frame(
id=(1:5),
test=c(86:90)
)
tf2 <- data.frame(
id=(6:10),
test=c(91:95)
)
total <- rbind(tf,tf2)
total
total$test2 <-c(90:99)
total
# avg colume에 평균을 입력하시오
rowMeans(test,test2)
# avg colume에 평균을 입력하시오
rowMeans(total[,c(2,3)])
# avg colume에 평균을 입력하시오
total$avg<-rowMeans(total[,c(2,3)])
totoal
total
# 평균이 높은 탑3
head(arrange(desc(total$avg)),3)
# 평균이 높은 탑3
library('dplyr')
head(arrange(desc(total$avg)),3)
arrange(desc(total$avg))
desc(total$avg
arrange(desc(total$avg))
arrange(desc(total$avg))
# 평균이 높은 탑3
library(dplyr)
arrange(desc(total$avg))
total %>% arrange(desc(avg))
total %>% arrange(desc(avg)) %>% head(3)
colMeans(avg)
colMeans(total$avg)
colMeans(total[4,]
total[total$avg>=mean(total$avg),]
total[total$avg>=mean(total$avg),]
avg
avg>= mean(avg)
total %>% summarise(
total$avg>= total$mean(avg)
)
total$avg
total$mean(avg)
total %>% summarise(
total$avg>= mean(total$avg)
)
summarise(
total$avg>= mean(total$avg)
)
library('midwest')
library(ggplot2)
mid_west<-midwest
mid_west
mid_west$young <- mid_west$poptotal-mid_west$popadults
mid_west$youngPercent <-mid_west$young/mid_west$poptotal
mid_west$youngPercent
library(dplyr)
>%> summarise(
arrange(desc(mid_west$youngPercent))
)
mid_west %>% group_by(country) %>%
summarise(
arrange(desc(mid_west$youngPercent))
) %>%
head(5)
mid_west %>% group_by(county) %>%
summarise(
arrange(desc(mid_west$youngPercent))
) %>%
head(5)
mid_west %>% group_by(county) %>%
summarise(
arrange(desc(youngPercent))
) %>%
head(5)
mid_west %>% group_by(county) %>%
summarise(
arrange(desc(youngPercent))
) %>%
head(5)
mid_west %>% group_by(county) %>%
summarise(
arrange(desc(youngPercent))
)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
%>% filter(youngPercent)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
%>% filter(youngPercent)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
%>%
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
filter(youngPercent)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
filter(youngPercent)
mid_west
mid_west %>% group_by(county)
mid_west %>% group_by(county) %>%
filter(youngPercent)>%>
arrange(desc(youngPercent))%>%
head(5)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)%>%
fileter
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)%>%
filter
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)%>%
youngPercent
prob2<-mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)%>%
prob2<-mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
prob2 <- mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
prob2$youngPercent
mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
prob2$youngPercent
head(arrange(desc(mid_west$youngPercent)),5)
head(arrange(desc(mid_west$youngPercent)),5)
prob2 <- mid_west %>% group_by(county) %>%
arrange(desc(youngPercent))%>%
head(5)
cat <- c('large','middle','small')
mid_west %>%
group_by(cat)
mid_west$cat
if(mid_west$youngPercent>=0.4){
mid_west$avg='large'
}
if(mid_west$youngPercent>=0.4){
mid_west$avg='large'
}else if(mid_west$youngPercent>=0.3 & mid_west$youngPercent<0.4){
mid_west$avg='middle'
}else{
mid_west$avg='small'
}
#3.
mid_west$cat <- if(mid_west$youngPercent>=0.4){
mid_west$avg='large'
}else if(mid_west$youngPercent>=0.3 & mid_west$youngPercent<0.4){
mid_west$avg='middle'
}else{
mid_west$avg='small'
}
mid_west$popjuni <-
100-(mid_west$popadults/midwest$poptotal)*100
head(mid_west$popjuni)
prob2$youngPercent
mid_west$grade <- ifelse(mid_west$popjuni>=40, 'large', ifelse(mid_west$popjuni<30, 'small','middle'))
midwest$grade
mid_west$grade
mid_west$popasianrate <-
(mid_west$popasian/mid_west$poptotal*100)
head(mid_west[order(popasianrate),c('state','country','popasianrate')],10)
head(mid_west[order(popasianrate),c('state','county','popasianrate')],10)
head(mid_west[order(popasianrate),c('state','county','popasianrate')],10)
mid_west$popasianrate <-
(mid_west$popasian/mid_west$poptotal*100)
head(mid_west[order(popasianrate),c('state','county','popasianrate')],10)
head(mid_west[order(popasianrate),c('state','county','popasianrate')],10)
head(mid_west[order(mid_west$popasianrate),c('state','county','popasianrate')],10)
st <- read.csv('csv_exam.csv')
st
st <- read.csv('csv_exam.csv',header = F)
st
colnames(st) <- c('id','class','ko','en','ma')
table(is.na(st$class))
mean(st$ko,na.rm=T)
table(is.na(st))
filter(is.na(st)==FALSE)
filter(is.na(st)=FALSE)
filter(is.na(st)FALSE)
filter(is.na(st))
is.na(st)
is.na(st$ko)
st[!is.na(st$ko)]
st[!is.na(st$ko)&!is.na(st$class),c('id','class','ko')]
na.omit(st[,c('id','class','ko')])
st[!is.na(st$ko)&!is.na(st$class),c('id','class','ko')]
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
na.omit(st)
st <- read.csv('csv_exam.csv',header = F)
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
na.omit(st)
st[!is.na(st$ko)&!is.na(st$class),c('id','class','ko')]
(is.na(st))
st[!is.na(st$ko)&!is.na(st$class),c('id','class','ko')]
st <- read.csv('csv_exam.csv',header = F)
st
colnames(st) <- c('id','class','ko','en','ma')
table(is.na(st$class))
mean(st$ko,na.rm=T)
(is.na(st))
st[!is.na(st$ko)&!is.na(st$class),c('id','class','ko')]
na.omit(st[,c('id','class','ko')]) #결측치를 다 빼버
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
na.omit(st)
mean
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
st[,c('ko','en','ma')]
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
colMeans( st[,c('ko','en','ma')] )
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
colMeans( st[,c('ko','en','ma')] mna.rm = T)
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
colMeans( st[,c('ko','en','ma')] ,na.rm = T)
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
avg <- colMeans( st[,c('ko','en','ma')] ,na.rm = T)
#국어,영어,수학 성적의 평균을 구하여 vector를 만든다.
avg <- colMeans( st[,c('ko','en','ma')] ,na.rm = T)
avg
# NA 값을 모두 0으로 바꾸시오
is.na(st)
st$ko <-ifelse(is.na(st$ko),1,st$ko)
st$ko <-ifelse(is.na(st$en),1,st$en)
st$ko <-ifelse(is.na(st$ma),1,st$ma)
st$ko <-ifelse(is.na(st$ko),1,st$ko)
st$en <-ifelse(is.na(st$en),1,st$en)
st$ma <-ifelse(is.na(st$ma),1,st$ma)
st
st$class <-ifelse(is.na(st$class),1,st$class)
st
st$class <-ifelse(is.na(st$class),0,st$class)
st$ko <-ifelse(is.na(st$ko),0,st$ko)
st$en <-ifelse(is.na(st$en),0,st$en)
st$ma <-ifelse(is.na(st$ma),0,st$ma)
st
st$class <-ifelse(is.na(st$class),0,st$class)
st$ko <-ifelse(is.na(st$ko),0,st$ko)
st$en <-ifelse(is.na(st$en),0,st$en)
st$ma <-ifelse(is.na(st$ma),0,st$ma)
st
st$class <-ifelse(is.na(st$class),0,st$class)
st$ko <-ifelse(is.na(st$ko),0,st$ko)
st$en <-ifelse(is.na(st$en),0,st$en)
st$ma <-ifelse(is.na(st$ma),0,st$ma)
st
boxplot(st)
boxplot(st$ko)
qplot(st$ko)
hist(st$ko)
